plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}
group = 'springbase'
version = '0.0.1-SNAPSHOT'

bootJar.enabled = false
jar.enabled = true

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    configurations {
        asciidoctorExtensions
    }

    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // Validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // DB
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.mysql:mysql-connector-j'
        implementation 'org.flywaydb:flyway-core'
        implementation "org.flywaydb:flyway-mysql"

        // Monitoring
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // Swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Querydsl 추가
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // RestDocs
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.rest-assured:rest-assured'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testRuntimeOnly 'com.h2database:h2'
        // Test Cucumber
        testImplementation 'io.rest-assured:rest-assured:5.3.2'
        testImplementation 'io.cucumber:cucumber-java:7.18.1'
        testImplementation 'io.cucumber:cucumber-spring:7.18.1'
        testImplementation 'io.cucumber:cucumber-junit:7.18.1'
        testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'
        testImplementation("org.junit.platform:junit-platform-suite:1.10.3")
        testImplementation("org.junit.platform:junit-platform-suite-api:1.10.3")
        testImplementation("org.junit.platform:junit-platform-commons:1.10.3")
        testImplementation("org.junit.platform:junit-platform-engine:1.10.3")
    }

    // Querydsl 설정
    def queryDSLGenerated = 'src/main/generated'
    // querydsl QClass 파일 생성 위치를 지정
    tasks.withType(JavaCompile) {
        options.getGeneratedSourceOutputDirectory().set(file(queryDSLGenerated))
    }
    // java source set 에 querydsl QClass 위치 추가
    sourceSets {
        main.java.srcDirs += [queryDSLGenerated]
    }


    // RestDocs 설정
    def buildSnippetsDir = 'build/generated-snippets' // snippet이 생성되는 디렉터리 경로

    tasks.register('testDocs', Test) {
        useJUnitPlatform()
        filter {
            includeTestsMatching "*.docs.*"
        }
        outputs.dir file(buildSnippetsDir)
    }

    asciidoctor {
        inputs.dir file(buildSnippetsDir)
        configurations 'asciidoctorExtensions'
        dependsOn testDocs
    }

    bootJar {
        dependsOn asciidoctor
        from("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }

    task copyDocs(type: Copy) {
        dependsOn asciidoctor

        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.named('clean') {
        // QClass 삭제
        delete file(queryDSLGenerated)
        // RestDocs 삭제
        delete file('src/main/resources/static/docs')
    }
}
