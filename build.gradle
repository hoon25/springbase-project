plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
}
group = 'springbase'
version = '0.0.1-SNAPSHOT'

bootJar.enabled = false
jar.enabled = true

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'com.epages.restdocs-api-spec'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
    }
}

subprojects {
    configurations {
        asciidoctorExtensions
    }

    dependencies {
        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // Validation
        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // DB
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'com.mysql:mysql-connector-j'
        implementation 'org.flywaydb:flyway-core'
        implementation "org.flywaydb:flyway-mysql"

        // Monitoring
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'io.micrometer:micrometer-registry-prometheus'

        // Swagger
        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
        testImplementation 'com.epages:restdocs-api-spec-restassured:0.18.2'
        testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'

        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // Querydsl 추가
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"

        // RestDocs
        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'

        // Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testRuntimeOnly 'com.h2database:h2'
        // Test Cucumber
        testImplementation 'io.rest-assured:rest-assured:5.3.2'
        testImplementation 'io.cucumber:cucumber-java:7.18.1'
        testImplementation 'io.cucumber:cucumber-spring:7.18.1'
        testImplementation 'io.cucumber:cucumber-junit:7.18.1'
        testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.18.1'
        testImplementation("org.junit.platform:junit-platform-suite:1.10.3")
        testImplementation("org.junit.platform:junit-platform-suite-api:1.10.3")
        testImplementation("org.junit.platform:junit-platform-commons:1.10.3")
        testImplementation("org.junit.platform:junit-platform-engine:1.10.3")
    }


    //==================================================================================================
    // QueryDSL 관련 Task
    def queryDSLGenerated = 'src/main/generated'
    // querydsl QClass 파일 생성 위치를 지정
    tasks.withType(JavaCompile) {
        options.getGeneratedSourceOutputDirectory().set(file(queryDSLGenerated))
    }
    // java source set 에 querydsl QClass 위치 추가
    sourceSets {
        main.java.srcDirs += [queryDSLGenerated]
    }

    tasks.named('clean') {
        // QClass 삭제
        delete file(queryDSLGenerated)
    }

    //==================================================================================================
    // RestDocs 관련 Task
    def buildSnippetsDir = 'build/generated-snippets' // snippet이 생성되는 디렉터리 경로

    tasks.register('testDocs', Test) {
        useJUnitPlatform()
        filter {
            includeTestsMatching "*.docs.*"
        }
        outputs.dir file(buildSnippetsDir)
    }

    tasks.named('asciidoctor') {
        dependsOn testDocs
        inputs.dir file(buildSnippetsDir)
        configurations 'asciidoctorExtensions'
        doLast {
            copy {
                from file("${asciidoctor.outputDir}")
                into file("src/main/resources/static/docs")
            }
        }
    }

    //==================================================================================================
    //RestDocs기반 Swagger 생성 Task
    openapi3 {
        server = "http://localhost:8080" // API 요청을 보낼 서버 주소 설정
        title = "restdocs-swagger API Documentation" // API 문서 제목
        description = "Spring REST Docs with SwaggerUI." // API 문서 설명
        version = "0.0.1" // API 문서 버전
        format = "yaml" // API 문서 출력 포맷 (default = JSON)
        outputDirectory = file("${project.buildDir}/resources/main/static/swagger") // API 문서 출력 경로
    }

    afterEvaluate {
        tasks.named('openapi3').configure {
            dependsOn.clear()
            dependsOn tasks.named('testDocs')
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    tasks.register('updateDocs', Test) {
        // 문서만 업데이트
        dependsOn('asciidoctor')
        dependsOn('openapi3')
    }

    tasks.named('bootJar') {
        dependsOn updateDocs
    }
}
